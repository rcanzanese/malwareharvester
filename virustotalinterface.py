"""virustotalinterface.py

Interfaces with the VirusTotal interface and respects 4 requests / min limit.
"""

# Copyright 2015 Ray Canzanese
# rcanzanese@gmail.com
#
# This file is part of malwareharvester.
#
# malwareharvester is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# malwareharvester is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with malwareharvester.  If not, see <http://www.gnu.org/licenses/>.

# TODO list
# - rewrite code to safely handle SQL queries

from datetime import datetime
import time
import requests


class virustotalinterface:
    """Class for making VirusTotal API requests"""

    _max_requests_per_minute = 4
    _time_period = 60

    _host = "www.virustotal.com"
    _selector = "https://www.virustotal.com/vtapi/v2/file/scan"
    _url = "https://www.virustotal.com/vtapi/v2/file/report"

    def __init__(self, api_key):
        """Create new iterface object

        Keyword arguments:
        api_key - VirusTotal API key string
        """
        self.api_key = api_key

        self.timestamps = [datetime.now() for i in
            range(self._max_requests_per_minute)]

    def _rate_limit(self):
        """ Rate limits the number of requests we can make per minute
        to VirusTotal's servers """
        now = datetime.now()
        oldest = 0

        for timestamp in self.timestamps:
            elsecs = (now - timestamp).total_seconds()
            if elsecs > self._time_period:
                self.timestamps.remove(timestamp)
            else:
                oldest = max(oldest, elsecs)

        # Enforce rate limiting
        if len(self.timestamps) < self._max_requests_per_minute:
            return True
        elif len(self.timestamps) == self._max_requests_per_minute:
            time.sleep(self._time_period - oldest)
            return True
        else:
            raise Exception("Too many requests in last 60 seconds.")

    def _make_request(self, parameters):
        """ Makes a request to VT's servers, retrying until success."""
        success = False

        # how long to wait if there is a failure
        backoff = 60

        # Loop until success
        while not success:
            try:
                self._rate_limit()
                response = requests.post(self._url, parameters)
                self.timestamps.append(datetime.now())
                return response.json()
            except Exception as e:
                print(e)
                print(response.status_code)
                print(response.text)
                print('VirusTotal lookup failed.  Retrying in ' +
                    str(backoff) + ' seconds...')
                time.sleep(backoff)
                backoff *= 2

    def lookup_by_hash(self, hash_value):
        """Lookup VirusTotal information by hash."""
        parameters = {"resource": hash_value, "apikey": self.api_key,
            "allinfo": 1}
        response = self._make_request(parameters)

        # The file has not been scanned with VT
        if response['response_code'] == 0:
            return None

        # There was a result that we return
        elif response['response_code'] == 1:
            return response

    def parse_response(self, response):
        """Parse the interesting information we want from response."""

        entry = dict()
        entry['Detections'] = response['positives']
        entry['Detectors'] = response['total']
        entry['ScanDate'] = response['scan_date']
        entry['LastUpdated'] = time.strftime('%Y-%m-%d %H:%M:%S')
        if 'last_seen' in response:
            entry['LastSeen'] = response['last_seen']
        if 'first_seen' in response:
            entry['FirstSeen'] = response['first_seen']
        try:
            entry['TrID'] = response['additional_info']['trid']
        except:
            entry['TrID'] = ""

        if int(response['positives']) > 0:
            for key in response['scans']:
                if response['scans'][key]['detected']:
                    entry[key.replace("-", "").replace(" ", "")
                        .replace("+", "_")] = response['scans'][key]['result']
        return entry

    def submit_to_virustotal(self, filename, file_to_send):
        """Submits the malware sample to virustotal."""

        attr = {"apikey": self.api_key}
        files = {"file": file_to_send}

        self._rate_limit()
        res = requests.post(self._selector, data=attr, files=files)

        if res.status_code == 200:
            print("Sumbmitted")
        else:
            print("Submission failed")

        self.timestamps.append(datetime.now())

        return 0
